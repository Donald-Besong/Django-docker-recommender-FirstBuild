"""
Django settings for donald_project project.

Generated by 'django-admin startproject' using Django 1.11.8.

For more information on this file, see
https://docs.djangoproject.com/en/1.11/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.11/ref/settings/
"""
import os
from pathlib import Path

import whitenoise  # to prevent caching during development
from django.contrib.messages import constants as messages
from dotenv import find_dotenv, load_dotenv

# dotenv is not needed anymore since docker-compose
# has the env directive that loads the .env's variables
# but .env is typically not bundled into production images.
# load_dotenv() won’t find .env in prod, but that’s fine.


# SECURITY WARNING: don't run with debug turned on in production!
# DEBUG = False
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
APP_DIR = BASE_DIR / "recommender_app"
# print("*********** {} ***********".format(BASE_DIR))
# load_dotenv(find_dotenv(), override=True)
load_dotenv(
    find_dotenv(".env-prod"), override=True
)  # not needed in cloudformation as this is set directly in the formation templates
DEBUG = bool(int(os.environ.get("DJANGO_DEBUG", default=1)))
USE_S3 = bool(
    os.environ.get("USE_S3", default=0)
)  # False, if true, be sure to paste the approriate bucket policy
USE_DATABASE_AWS = bool(os.environ.get("USE_DATABASE_AWS", default=0))  # False
DEFAULT_AUTO_FIELD = "django.db.models.AutoField"
CRISPY_TEMPLATE_PACK = "bootstrap4"
LOGIN_REDIRECT_URL = "home"
LOGIN_URL = "login"
if USE_S3:
    STATICFILES_STORAGE = "storages.backends.s3boto3.S3Boto3Storage"
    DEFAULT_FILE_STORAGE = "storages.backends.s3boto3.S3Boto3Storage"
    AWS_ACCESS_KEY_ID = os.environ["AWS_ACCESS_KEY_ID"]
    AWS_SECRET_ACCESS_KEY = os.environ["AWS_SECRET_ACCESS_KEY"]
    # print("*********testing env {} ***********".format(AWS_ACCESS_KEY_ID))
    AWS_STORAGE_BUCKET_NAME = "django-recommender-bucket"
    AWS_S3_FILE_OVERWRITE = False
    AWS_DEFAULT_ACL = None
    # AWS_DEFAULT_ACL = 'public-read'
    AWS_S3_CUSTOM_DOMAIN = f"{AWS_STORAGE_BUCKET_NAME}.s3.amazonaws.com"
    AWS_S3_OBJECT_PARAMETERS = {"CacheControl": "max-age=86400"}
    # s3 static settings
    AWS_LOCATION = "static"
    STATIC_URL = f"https://{AWS_S3_CUSTOM_DOMAIN}/{AWS_LOCATION}/"
    # print("********* static_url {} ***********".format(STATIC_URL))
else:
    if not DEBUG:
        STATIC_ROOT = BASE_DIR / "static/"  # for production first collectstatic
    MEDIA_ROOT = BASE_DIR / "media"  # saves media here, default loads from here
    MEDIA_URL = "/media/"  # you access it via http://localhost:8000/media/default.jpg
    STATIC_URL = "static/"
    STATICFILES_DIRS = [
        APP_DIR / "static",
    ]
ACCESS_QUERY_STRING = False

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.11/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ["DJANGO_SECRET_KEY"]
ALLOWED_HOSTS = os.environ["DJANGO_ALLOWED_HOSTS"].split(" ")
CSRF_TRUSTED_ORIGINS = os.environ["DJANGO_CRSF_TRUSTED_ORIGINS"].split(" ")

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "crispy_forms",
    "storages",
    "recommender_app",
    "users",
    # 'crispy_bootstrap4',
]

MESSAGE_TAGS = {
    messages.ERROR: "danger",
}

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

if DEBUG:  # prevent caching of static and media files
    MIDDLEWARE = [
        "whitenoise.middleware.WhiteNoiseMiddleware",
    ] + MIDDLEWARE
    INSTALLED_APPS = [
        "whitenoise.runserver_nostatic",
    ] + INSTALLED_APPS

ROOT_URLCONF = "donald_project.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "donald_project.wsgi.application"


# Database
# https://docs.djangoproject.com/en/1.11/ref/settings/#databases

DATABASES_LOCAL = {
    "default": {
        "ENGINE": os.environ.get("SQL_ENGINE", ""),
        "NAME": os.environ.get("SQL_DB"),
        "USER": os.environ.get("SQL_USER", "user"),
        "PASSWORD": os.environ.get("DATABASE_PASSWORD"),
        "HOST": os.environ.get("SQL_HOST"),
        "PORT": os.environ.get("SQL_PORT", ""),
    }
}

DATABASES_AWS = {
    "default": {
        "ENGINE": os.environ.get("SQL_ENGINE", ""),
        "NAME": os.environ.get("SQL_DB"),
        "USER": os.environ.get("SQL_USER", "user"),
        "PASSWORD": os.environ.get("DATABASE_PASSWORD"),
        "HOST": os.environ.get("SQL_HOST"),
        "PORT": os.environ.get("SQL_PORT", ""),
    }
}

# DATABASES_AWS = {
# 'default': {
# 'ENGINE': 'django.db.backends.mysql',
# 'NAME': os.environ['DATABASE_NAME'],
# 'USER': os.environ['DATABASE_USER'],
# 'PASSWORD': os.environ['DATABASE_PASSWORD'],
# 'HOST': 'django-mysql-for-donredshift.cdcmvs7kspej.eu-west-1.rds.amazonaws.com',
# 'PORT': 3306,
# }
# }

if USE_DATABASE_AWS:
    DATABASES = DATABASES_AWS
else:
    DATABASES = DATABASES_LOCAL

# print("********* databases {} ***********".format(DATABASES['default']))
# Password validation
# https://docs.djangoproject.com/en/1.11/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/1.11/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.11/howto/static-files/


EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
EMAIL_HOST = "smtp.office365.com"
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = os.environ["EMAIL_USER"]
EMAIL_HOST_PASSWORD = os.environ["EMAIL_PASS"]
DEFAULT_FROM_EMAIL = EMAIL_HOST_USER
